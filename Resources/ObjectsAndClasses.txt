
╔═══════════════════════════════════════════════════════════════════════╗
║ Object
╠═══════════════════════════════════════════════════════════════════════╝

╟─ Софтуерните обекти моделират обекти от реалния свят или абстрактни концепции (които също разглеждаме като обекти).

╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Характеристики на обектите
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ Състояния / States
		├─┬─────────────────────────────────────────────────────────────────┘
			├─ Член -данни/-променливи (data members) описват състоянията на обектите. Те представляват променливи, вградени в обектите.
			
╟─├─┬───────────────────────────────────────────────────────────────────┐
		├─ Поведения / Behaviors
		├─┬─────────────────────────────────────────────────────────────────┘
			├─ Методи (methods) изграждат поведението на обектите.
			

╔═══════════════════════════════════════════════════════════════════════╗
║ Classes
╠═══════════════════════════════════════════════════════════════════════╝

╟─ Класът дефинира характеристики на даден обект (които ще наричаме атрибути) и неговото поведение (действията, които обектът може да извършва). Той е шаблон, чрез който се описва природата на някакъв обект. Атрибутите на класа се дефинират като собствени променливи в тялото му (наречени член-променливи). Поведението на обектите се моделира чрез дефиниция на методи в класовете. Всеки обект е представител на точно един клас.


╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Елементи на класа
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ Полета / Fields
		├─┬─────────────────────────────────────────────────────────────────┘
			├─ Член-данни (променливи) декларирани в класа. В тях се пазят данни, които отразяват състоянието на обекта и са нужни за работата на методите на класа. Стойността, която се пази в полетата, отразява конкретното състояние на дадения обект, но съществуват и такива полета, наречени статични, които са общи за всички обекти.


╟─├─┬───────────────────────────────────────────────────────────────────┐
		├─ Свойства / Properties
		├─┬─────────────────────────────────────────────────────────────────┘
			├─ разширяват функционалността на полетата като дават възможност за допълнителна обработка на данните при извличането и записването им в полетата от класа.

╟─├─┬───────────────────────────────────────────────────────────────────┐
		├─ Методи / Methods
		├─┬─────────────────────────────────────────────────────────────────┘
			├─ Именувани блокове програмен код. Те извършват някакви действия и чрез тях реализират поведението на обектите от този клас. В методите се изпълняват алгоритмите и се обработват данните на обекта.

╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Създаване и освобождаване на обекти
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ Създаването на обекти от предварително дефинирани класове по време на изпълнението на програмата става чрез оператора new.
		
╟─├─┬───────────────────────────────────────────────────────────────────┐
		├─ На променливата someCat от тип Cat присвояваме новосъздадена инстанция на класа Cat. Променливата someCat стои в стека (stack), а нейната стойност (инстанцията на класа Cat) стои в динамичната памет (managed heap)
		├─┬─────────────────────────────────────────────────────────────────┐
			Cat someCat = new Cat();

╟─├─┬───────────────────────────────────────────────────────────────────┐
		│ Garbage Collector (.NET CLR)
		├─┬─────────────────────────────────────────────────────────────────┘
			├─ Това е система за почистване на паметта. Обектите, към които в даден момент вече няма референция в програмата, автоматично се унищожават и паметта, която заемат, се освобождава.

╟─├─┬───────────────────────────────────────────────────────────────────┐
		├─ Ако искаме ръчно да освободим даден обект, трябва да унищожим референцията към него
		├─┬─────────────────────────────────────────────────────────────────┘
			someCat = null;
			
		├─ Това не унищожава обекта веднага, но го оставя в състояние, в което той е недостъпен от програмата и при следващото включване на системата за почистване на паметта (garbage collector), той ще бъде освободен

╟─├─┬───────────────────────────────────────────────────────────────────┐
		│ Конструктори / Constructor
		├─┬─────────────────────────────────────────────────────────────────┘
			├─ Конструкторът е специален метод на класа, който се извиква автоматично при създаването на обект от този клас и извършва инициализация на данните му (това е неговото основно предназначение). Всеки клас може да има произволен брой конструктори с единственото ограничение, че броят и типът на параметрите им трябва да бъдат различни. Подходящият конструктор се избира автоматично от компилатора в зависимост от подадената съвкупност от параметри при създаването на обекта.
			
			
			
╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Достъп до полета на обекта
	├─┬───────────────────────────────────────────────────────────────────┘
		Достъпът до полетата и свойствата (properties) на даден обект става чрез оператора . (точка).

╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Достъп до метод на обект
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ Извикването на методите на даден обект става чрез оператора . (точка).



╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Статични членове / Static members
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ Статични членове се асоциират с тип данни (клас), а не с конкретна негова инстанция (обект). Наричаме ги статични членове (static members), защото са независими от конкретните обекти. Нещо повече, те се използват без да има създадена инстанция на класа, в който са дефинирани. Те могат да бъдат полета, методи и конструктори.

		├─██ статичните членове отразяват състояния и поведения на самата категория (клас), а нестатичните – състояния и поведения на отделните обекти на категорията.
		
		├─██ Клас, който има само private конструктори не може да бъде инстанциран. Такъв клас обикновено има само статични членове и се нарича utility клас.




╔═══════════════════════════════════════════════════════════════════════╗
║ System
╠═══════════════════════════════════════════════════════════════════════╝


╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Environment
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ Той съдържа набор от полезни полета и методи, които улесняват получаването на информация за хардуера и операционната система, а някои от тях дават възможност за взаимодействие с обкръжението на програмата.
		
╟─├─┬───────────────────────────────────────────────────────────────────┐
		├─ Информация за броя на процесорите, мрежовото име на компютъра, версията на операционната система, името на текущия потребител, текущата директория и др.
		
		├─ Достъп до външно дефинирани свойства (properties) и променливи на средата (environment variables)
		
╟─├─┬───────────────────────────────────────────────────────────────────┐
		│ TickCount
		├─┬─────────────────────────────────────────────────────────────────┘
			├─ Връща като резултат броя милисекунди, които са изтекли от включването на компютъра до момента на извикването на метода.

		├─┬─────────────────────────────────────────────────────────────────┐
			int sum = 0;
			int startTime = Environment.TickCount;
			
			// The code fragment to be tested
			for (int i = 0; i < 10000000; i++)
			{
				sum++;
			}
			
			int endTime = Environment.TickCount;
			Console.WriteLine(
				"The time elapsed is {0} sec.",
				(endTime - startTime) / 1000.0);



12|            |
08|        |
04|    |
02|  |

─ │ ═ ║

┌ ┐ └ ┘ ┬ ┴ ├ ┤ ┼

╔ ╗ ╚ ╝ ╦ ╩ ╠ ╣ ╬

╒ ╕ ╘ ╛ ╤ ╧ ╞ ╡ ╪

╓ ╖ ╙ ╜ ╥ ╨ ╟ ╢ ╫

▀ ▄ █ ▌ ▐ ░ ▒ ▓ ■ □ ▪ ▫ ▬ ▲ ► ▼ ◄ ◊ ○ ☺ ☻
██

╔═══════════════════════════════════════════════════════════════════════╗
║
╠═══════════════════════════════════════════════════════════════════════╝
╟─
╟─┐
╟─┬─────────────────────────────────────────────────────────────────────┐
╟─┬─────────────────────────────────────────────────────────────────────┐
	│
	├─────────────────────────────────────────────────────────────────────┘
	├─
	├─┐
	├─┬───────────────────────────────────────────────────────────────────┐
	├─┬───────────────────────────────────────────────────────────────────┐
		│
		├───────────────────────────────────────────────────────────────────┘
		├─┬─────────────────────────────────────────────────────────────────┐
			├─┬───────────────────────────────────────────────────────────────┐
				│
				├───────────────────────────────────────────────────────────────┘
				├─┬─────────────────────────────────────────────────────────────┐