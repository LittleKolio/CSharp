
╔═══════════════════════════════════════════════════════════════════════╗
║ Object
╠═══════════════════════════════════════════════════════════════════════╝

╟─ Софтуерните обекти моделират обекти от реалния свят или абстрактни концепции (които също разглеждаме като обекти).

╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Характеристики на обектите
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ Състояния / States
		├─┬─────────────────────────────────────────────────────────────────┘
			├─ Член -данни/-променливи (data members) описват състоянията на обектите. Те представляват променливи, вградени в обектите.
			
╟─├─┬───────────────────────────────────────────────────────────────────┐
		├─ Поведения / Behaviors
		├─┬─────────────────────────────────────────────────────────────────┘
			├─ Методи (methods) изграждат поведението на обектите.
			

╔═══════════════════════════════════════════════════════════════════════╗
║ Classes
╠═══════════════════════════════════════════════════════════════════════╝

╟─ Класът дефинира характеристики на даден обект (които ще наричаме атрибути) и неговото поведение (действията, които обектът може да извършва). Той е шаблон, чрез който се описва природата на някакъв обект. Атрибутите на класа се дефинират като собствени променливи в тялото му (наречени член-променливи). Поведението на обектите се моделира чрез дефиниция на методи в класовете. Всеки обект е представител на точно един клас.


╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Елементи на класа
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ Полета / Fields
		├─┬─────────────────────────────────────────────────────────────────┘
			├─ Член-данни (променливи) декларирани в класа. В тях се пазят данни, които отразяват състоянието на обекта и са нужни за работата на методите на класа. Стойността, която се пази в полетата, отразява конкретното състояние на дадения обект, но съществуват и такива полета, наречени статични, които са общи за всички обекти.


╟─├─┬───────────────────────────────────────────────────────────────────┐
		├─ Свойства / Properties
		├─┬─────────────────────────────────────────────────────────────────┘
			├─ разширяват функционалността на полетата като дават възможност за допълнителна обработка на данните при извличането и записването им в полетата от класа.

╟─├─┬───────────────────────────────────────────────────────────────────┐
		├─ Методи / Methods
		├─┬─────────────────────────────────────────────────────────────────┘
			├─ Именувани блокове програмен код. Те извършват някакви действия и чрез тях реализират поведението на обектите от този клас. В методите се изпълняват алгоритмите и се обработват данните на обекта.

╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Създаване и освобождаване на обекти
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ Създаването на обекти от предварително дефинирани класове по време на изпълнението на програмата става чрез оператора new.
		
		├─ При създаване на обект всички негови полета се инициализират с подразбиращите се стойности за типа им, освен ако изрично не бъдат инициализирани.
		
╟─├─┬───────────────────────────────────────────────────────────────────┐
		├─ На променливата someCat от тип Cat присвояваме новосъздадена инстанция на класа Cat. Променливата someCat стои в стека (stack), а нейната стойност (инстанцията на класа Cat) стои в динамичната памет (managed heap)
		├─┬─────────────────────────────────────────────────────────────────┐
			Cat someCat = new Cat();

╟─├─┬───────────────────────────────────────────────────────────────────┐
		│ Garbage Collector (.NET CLR)
		├─┬─────────────────────────────────────────────────────────────────┘
			├─ Това е система за почистване на паметта. Обектите, към които в даден момент вече няма референция в програмата, автоматично се унищожават и паметта, която заемат, се освобождава.

╟─├─┬───────────────────────────────────────────────────────────────────┐
		├─ Ако искаме ръчно да освободим даден обект, трябва да унищожим референцията към него
		├─┬─────────────────────────────────────────────────────────────────┘
			someCat = null;
			
		├─ Това не унищожава обекта веднага, но го оставя в състояние, в което той е недостъпен от програмата и при следващото включване на системата за почистване на паметта (garbage collector), той ще бъде освободен

╟─├─┬───────────────────────────────────────────────────────────────────┐
		│ Конструктори / Constructor
		├─┬─────────────────────────────────────────────────────────────────┘
			├─ Конструкторът е специален метод на класа, няма тип на връщана стойност и носи името на класа. Той се извиква чрез ключовата дума new при създаването на обект от този клас и извършва инициализация на данните му (това е неговото основно предназначение). Всеки клас може да има произволен брой конструктори с единственото ограничение, че броят и типът на параметрите им трябва да бъдат различни. Подходящият конструктор се избира автоматично от компилатора в зависимост от подадената съвкупност от параметри при създаването на обекта.
			
			├─ Единственият начин да извикаме един конструктор в C# е чрез ключовата дума new. Тя заделя памет за новия обект (в стека или в хийпа според това дали обектът е стойностен или референтен тип), занулява полетата му, извиква конструктора му (или веригата конструктори, образувана при наследяване) и накрая връща референция към новозаделения обект.
			
			
			
╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Достъп до полета на обекта
	├─┬───────────────────────────────────────────────────────────────────┘
		Достъпът до полетата и свойствата (properties) на даден обект става чрез оператора . (точка).

╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Достъп до метод на обект
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ Извикването на методите на даден обект става чрез оператора . (точка).



╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Статични членове / Static members
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ Статични членове се асоциират с тип данни (клас), а не с конкретна негова инстанция (обект). Наричаме ги статични членове (static members), защото са независими от конкретните обекти. Нещо повече, те се използват без да има създадена инстанция на класа, в който са дефинирани. Те могат да бъдат полета, методи и конструктори.

		├─██ статичните членове отразяват състояния и поведения на самата категория (клас), а нестатичните – състояния и поведения на отделните обекти на категорията.
		
		├─██ Клас, който има само private конструктори не може да бъде инстанциран. Такъв клас обикновено има само статични членове и се нарича utility клас.

╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Static class
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ A static class cannot be instantiated. In other words, you cannot use the new keyword to create a variable of the class type. Because there is no instance variable, you access the members of a static class by using the class name itself.

		A static class can be used as a convenient container for sets of methods that just operate on input parameters and do not have to get or set any internal instance fields. For example, the static System.Math class

╟─┬─────────────────────────────────────────────────────────────────────┐
	│ this
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ В C# дава достъп до референцията към текущия обект, когато се използва от метод в даден клас.
		
		├─ Този достъп е възможен само от нестатичен код, т.е. метод или блок, който няма модификатор static.
		
╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Inheritance
	├─┬───────────────────────────────────────────────────────────────────┘
		├─  Inheritance enables you to create new classes that reuse, extend, and modify the behavior that is defined in other classes. The class whose members are inherited is called the base class, and the class that inherits those members is called the derived class. A derived class can have only one direct base class. However, inheritance is transitive.
╔═══════════════════════════════════════════════════════════════════════╗
║ System
╠═══════════════════════════════════════════════════════════════════════╝


╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Environment
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ Той съдържа набор от полезни полета и методи, които улесняват получаването на информация за хардуера и операционната система, а някои от тях дават възможност за взаимодействие с обкръжението на програмата.
		
╟─├─┬───────────────────────────────────────────────────────────────────┐
		├─ Информация за броя на процесорите, мрежовото име на компютъра, версията на операционната система, името на текущия потребител, текущата директория и др.
		
		├─ Достъп до външно дефинирани свойства (properties) и променливи на средата (environment variables)
		
╟─├─┬───────────────────────────────────────────────────────────────────┐
		│ TickCount
		├─┬─────────────────────────────────────────────────────────────────┘
			├─ Връща като резултат броя милисекунди, които са изтекли от включването на компютъра до момента на извикването на метода.

		├─┬─────────────────────────────────────────────────────────────────┐
			int sum = 0;
			int startTime = Environment.TickCount;
			
			// The code fragment to be tested
			for (int i = 0; i < 10000000; i++)
			{
				sum++;
			}
			
			int endTime = Environment.TickCount;
			Console.WriteLine(
				"The time elapsed is {0} sec.",
				(endTime - startTime) / 1000.0);


				
				
				
╔═══════════════════════════════════════════════════════════════════════╗
║ Encapsulation
╠═══════════════════════════════════════════════════════════════════════╝
╟─ Achieved with access modifiers (private, public…). Encapsulation is used to hide the code and data inside a single unit to protect the data from the outside the world 

╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Encapsulate Collection
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ There are many different ways of exposing a collection, the correct method always depends on the situation.
	
╟─├─┬───────────────────────────────────────────────────────────────────┐
		│Collection which can be changed
		├─┬─────────────────────────────────────────────────────────────────┘
			private List<T> collection;
			public List<T> Collection
			{
				get { return this.collection; }
				set
				{
						if (value == null)
						{
								throw new ArgumentNullException();
						}
						this.collection = value;
				}
			}

╟─├─┬───────────────────────────────────────────────────────────────────┐
		│Collection that can be modified, but not swapped
		├─┬─────────────────────────────────────────────────────────────────┘
			private ObservableCollection<T> collection;
			public IList<T> Collection
			{
				get { return this.collection; }
			}
			
╟─├─┬───────────────────────────────────────────────────────────────────┐
		│Expose a read-only copy of a collection
		├─┬─────────────────────────────────────────────────────────────────┘
			private List<T> collection;
			public ReadOnlyCollection<T> Collection
			{
				get { return new ReadOnlyCollection<T>(this.collection); }
			}
			┌─────────────────────────────────────────────────────────────────┐
			├─ When exposing collections that are read only always be aware that the items in the control can still be modified. Again this might be a good thing, but if you want the exposed collection to be "completely" unmodifiable then make sure that the items in the collection are also read-only / immutable (e.g. System.String).
			
╟─├─┬───────────────────────────────────────────────────────────────────┐
		│Collections that can be modified, but only in a certain way
		├─┬─────────────────────────────────────────────────────────────────┘
			private List<T> collection;
			public ReadOnlyCollection<T> Collection
			{
				get { return new ReadOnlyCollection<T>(this.collection); }
			}
			public AddItem(T item);
			
╟─├─┬───────────────────────────────────────────────────────────────────┐
		│Custom collection that encapsulates your "real" collection
		├─┬─────────────────────────────────────────────────────────────────┘
			public sealed class CustomCollection<T> : IList<T>
			{
				private IList<T> wrappedCollection;

				public CustomCollection(IList<T> wrappedCollection)
				{
						if (wrappedCollection == null)
						{
								throw new ArgumentNullException("wrappedCollection");
						}
						this.wrappedCollection = wrappedCollection;
				}

				// "hide" methods that don't make sense by explicitly implementing them and
				// throwing a NotSupportedException
				void IList<T>.RemoveAt(int index)
				{
						throw new NotSupportedException();
				}

				// Implement methods that do make sense by passing the call to the wrapped collection
				public void Add(T item)
				{
						this.wrappedCollection.Add(item);
				}
			}
			
			
			public class MyClass
			{
				private CustomCollection<T> wrappedCollection;
				private List<T> collection = new List<T>();
				
				public CustomCollection<T> Collection
				{
					get { return this.wrappedCollection; }
				}
				
				public MyClass()
				{
					this.wrappedCollection = new CustomCollection<T>(this.collection)
				}
			}




			
╔═══════════════════════════════════════════════════════════════════════╗
║ Abstraction
╠═══════════════════════════════════════════════════════════════════════╝
╟─ Achieved with interfaces and abstract classes. Abstraction is a process of hiding the implementation details and showing only functionality to the user.

Abstraction means ignoring irrelevant features, properties, or functions and emphasizing the relevant ones relevant to the project we develop
Abstraction helps managing complexity


╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Abstract Class
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ An abstract class can contain access modifiers for the subs, functions, properties.
		
		├─ An abstract class can have fields and constants defined
		
		├─ If we add a new method to an abstract class then we have the option of providing default implementation and therefore all the existing code might work properly.

	├─┬───────────────────────────────────────────────────────────────────┐
		│ When to use
		├─┬─────────────────────────────────────────────────────────────────┘
			├─ If various implementations are of the same kind and use common behavior or status then abstract class is better to use.

				
╔═══════════════════════════════════════════════════════════════════════╗
║ Interface
╠═══════════════════════════════════════════════════════════════════════╝
╟─ A program has classes, methods and properties. What if these members could be used in a unified way? What if we could share this code?

╟─ An interface cannot have access modifiers for the subs, functions, properties etc. Everything is assumed as public. No fields can be defined in interfaces
╟─ If we add a new method to an Interface then we have to track down all the implementations of the interface and define implementation for the new method.

If various implementations only share method signatures then it is better to use Interfaces.

 An interface can contain signatures of methods, properties, indexers, events
 
╟─┬─────────────────────────────────────────────────────────────────────┐
	public interface IPrintable {
		//adds public abstract for all members
		void Print();
	}

	class Document : IPrintable
	{  
		public void Print() { Console.ReadLine("Hello"); }
	}




╔═══════════════════════════════════════════════════════════════════════╗
║ Tuple
╠═══════════════════════════════════════════════════════════════════════╝

╟─┬─────────────────────────────────────────────────────────────────────┐
	├─ A tuple is an ordered list of elements. In mathematics, an n-tuple is a sequence (or ordered list) of "n" elements, where "n" is a non-negative integer.

╟─┬─────────────────────────────────────────────────────────────────────┐
	├─ Tuple is not a struct. It is a class. It will be allocated upon the managed heap. Each class instance that is allocated adds to the burden of garbage collection.

╟─┬─────────────────────────────────────────────────────────────────────┐
	├─ The properties Item1, Item2 and further do not have setters. We cannot change a property (like Item1) after the constructor has run. A Tuple is immutable once created in memory. This limitation can lead to more maintainable code that does not rely on field changes through time. It can also reduce performance.
	
╟─┬─────────────────────────────────────────────────────────────────────┐
	├─ A Tuple has advantages. It is a reference and can be reused. When a Tuple is passed as an argument, only 4 bytes need copying. But KeyValuePair, a struct, has more bytes.

╟─┬─────────────────────────────────────────────────────────────────────┐
	├─ When we create a Tuple, we specify the order and types of the fields. Tuple can have more complex items inside it, such as arrays. We can also pass the Tuple to other methods.

╟─┬─────────────────────────────────────────────────────────────────────┐
	var tuple = new Tuple<string, string[], int, int[]>
	(
		"perl",
		new string[] { "java", "c#" },
		1,
		new int[] { 2, 3 }
	);



╟─┬─────────────────────────────────────────────────────────────────────┐
	├─ The Tuple.Create method calls a constructor and returns a reference. There is essentially no functional reason to ever call Tuple.Create. It might have more pleasing syntax.
	
	├─┬───────────────────────────────────────────────────────────────────┐
		var tuple = Tuple.Create("cat", 2, true);



╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Sort
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ Tuples can be sorted. A Tuple is a great way to encapsulate units of data. But it can make sorting harder. A Comparison delegate is needed.


╟─┬─────────────────────────────────────────────────────────────────────┐
	│ ValueTuple
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ With a ValueTuple, we can use a simpler syntax form to create and handle tuples. Add the System.ValueTuple package to your program (it is a NuGet package).
		
	├─┬───────────────────────────────────────────────────────────────────┐
		var data = (10, "bird", 1.5);

	├─┬───────────────────────────────────────────────────────────────────┘
		├─ With the ValueTuple syntax we can improve the readability of code that uses tuples. We do not need to use Item1, Item2 syntax—we can access items by a label or name. 


╔═══════════════════════════════════════════════════════════════════════╗
║ Reflection
╠═══════════════════════════════════════════════════════════════════════╝

╟─ Reflection is the ability of a computer program to examine and modify the structure and behavior of the program at runtime. Reflection allows you to obtain information about  types defined within assemblies,  information about fields, properties and methods.

The classes in the System.Reflection namespace, together with System.Type, enable you to obtain information about loaded assemblies and the types defined within, such as classes, interfaces, and value types. You can also use reflection to create type instances at run time and to invoke them.

	class Program
	{
		private static int a = 5, b = 10, c = 20;

		static void Main(string[] args)
		{
			Console.WriteLine("a + b + c = " + (a + b + c));
			
			//Enter the name of the variable that you wish to change
			string varName = Console.ReadLine();
			
			Type t = typeof(Program);
			FieldInfo fieldInfo = t.GetField(
				varName, 
				BindingFlags.NonPublic | 
				BindingFlags.Static
				);
				
			if(fieldInfo != null)
			{
				Console.WriteLine(
					"The current value of " + 
					fieldInfo.Name + " is " + 
					fieldInfo.GetValue(null) + 
					". You may enter a new value now:"
					);
					
				string newValue = Console.ReadLine();
				int newInt;
				if(int.TryParse(newValue, out newInt))
				{
					fieldInfo.SetValue(null, newInt);
					Console.WriteLine("a + b + c = " + (a + b + c));
				}
				Console.ReadKey();
			}
		}
	}
╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Compile Time 
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ if you know it’s name
		
		Type myType = typeof(ClassName);
		
╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Run Time 
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ if the name is unknown
		
		Type myType = Type.GetType("Namespace.ClassName")

╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Fields
	├─┬───────────────────────────────────────────────────────────────────┘
		Type type = typeof(ClassName);

		FieldInfo field = type.GetField("fieldName");


		ClassName testInstance = (ClassName)Activator
			.CreateInstance(type);
			
		field.SetValue(testInstance, 5);
		int fieldValue = (int)field.GetValue(testInstance);	
	
	├─┬───────────────────────────────────────────────────────────────────┐
		Type type = Type.GetType(className);

		FieldInfo[] fields = type.GetFields(
			BindingFlags.NonPublic |
			BindingFlags.Public |
			BindingFlags.Instance |
			BindingFlags.Static
		);
		
		Dictionary<string, Func<FieldInfo[]>> filter
			= new Dictionary<string, Func<FieldInfo[]>>()
		{
			{ "private", () => fields.Where(f => f.IsPrivate).ToArray() },
			{ "protected", () => fields.Where(f => f.IsFamily).ToArray() },
			{ "public", () => fields.Where(f => f.IsPublic).ToArray() },
			{ "all", () => fields }
		};

╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Properties and Methods
	├─┬───────────────────────────────────────────────────────────────────┘
		Type type = Type.GetType(className);
		MethodInfo testMethod = type.GetMethod("MethodName");
		MethodInfo overloadMethod = type.GetMethod(
			"MethodName",
			new []{typeof(...)}
		);

		MethodInfo[] propsSetter = type.GetMethods(
			BindingFlags.Public |
			BindingFlags.Instance
		);
		foreach (MethodInfo method in 
			propsSetter.Where(p => p.Name.StartsWith("set")))
		{
			// some code
		}
		
		MethodInfo[] propsGetter = type.GetMethods(
			BindingFlags.NonPublic |
			BindingFlags.Instance
		);
		foreach (MethodInfo method in 
			propsGetter.Where(p => p.Name.StartsWith("get")))
		{
			// some code
		}
╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Factory for classes
	├─┬───────────────────────────────────────────────────────────────────┘
		public ISome GetAppender(string name, IOther other)
		{
			Type type = Assembly
				.GetExecutingAssembly()
				.GetTypes()
				.FirstOrDefault(t => t.Name == name);

			return (ISome)Activator.CreateInstance(type, other);
		}
		
		
╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Instance
	├─┬───────────────────────────────────────────────────────────────────┘
		Type sbType = Type.GetType("System.Text.StringBuilder");

		StringBuilder sbInstance = (StringBuilder)Activator
			.CreateInstance(sbType);
			
		StringBuilder sbInstCapacity = (StringBuilder)Activator
			 .CreateInstance(sbType, new object[] {10});

╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Method of object(in this case Logger)
	├─┬───────────────────────────────────────────────────────────────────┘

		private ILogger logger;
		
		public void SendMessageToLogger(string message)
		{
			string[] tokens = message.Split('|');
			string methodName = this.ToTitleCase(tokens[0]);
			MethodInfo currentMethod = typeof(Logger)
				.GetMethod(methodName);
				
			currentMethod.Invoke(
				this.logger, 
				new object[] { tokens[1], tokens[2] }
				);
		}

		private string ToTitleCase(string methodName)
		{
			return CultureInfo
			.CurrentCulture
			.TextInfo
			.ToTitleCase(methodName.ToLower());
		}


╔═══════════════════════════════════════════════════════════════════════╗
║ Event
╠═══════════════════════════════════════════════════════════════════════╝

╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Delegate
	├─────────────────────────────────────────────────────────────────────┘
	├─ A delegate is a specialized class often called a Function Pointer (in C and C++)
	
	
	├─┬───────────────────────────────────────────────────────────────────┐
		public delegate void DelegateExample(int num, EnumType enumType);
		
		static void Main()
		{
			//1.
			DelegateExample dele1 = HandlerExample;
			dele1(1, EnumType.e1);
			
			//2.
			DelegateExample dele2 = new DelegateExample(HandlerExample);
			dele2(2, EnumType.e2);
			
			//3.
			MethodTest(HandlerExample);
			
			//4.
			DelegateExample dele4 = HandlerExample;
			dele4 += dele1;
			dele4(4, EnumType.e4);
		}
		
		static void HandlerExample(int num, EnumType enumType)
		{
			Console.WriteLine($"Number : {num} / Enum : {enumType}");
		}
		
		static void MethodTest(DelegateExample dele3)
		{
			dele3(3, EnumType.e3);
		}

╟─├─┬───────────────────────────────────────────────────────────────────┐
		│ Lambda
		├─┬─────────────────────────────────────────────────────────────────┘
			public delegate int DelegateExample(int a, int b);
			
			static void Main(string[] args)
			{         
				DelegateExample sum = (a, b) => a + b;
				int result = sum(1, 1); //2
			} 

╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Event
	├─────────────────────────────────────────────────────────────────────┘
	├─ Events in C# are special delegate instances declared by the keyword event. Event can be member of an interface - Delegates cannot.
	
	├─ An event can only be called in the class where it is defined. By default the access to the events is synchronized (thread-safe).

╟─├─┬───────────────────────────────────────────────────────────────────┐
		public delegate void DeathDelegate();
		
		public class Player
		{
			public event DeathDelegate DeathEvent;
			
			private 
		}














╔═══════════════════════════════════════════════════════════════════════╗
║ Access modifiers
╠═══════════════════════════════════════════════════════════════════════╝

╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Public 
	├─────────────────────────────────────────────────────────────────────┘
	├─ Липса на ограничения върху видимостта, най-малко рестриктивното от всички нива на достъп в C#. Това означава, че всеки друг клас ще може да създава обекти от тип този клас и да има достъп до методите и полетата на класа (стига тези полета да имат подходящо ниво на достъп).

╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Private (default access modifier)
	├─────────────────────────────────────────────────────────────────────┘
	├─ Не може да бъде достъпван от никой друг клас (освен от класа, в който е дефиниран). Прилага, когато липсва модификатор за достъп пред съответния елемент на класа.

╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Internal
	├─────────────────────────────────────────────────────────────────────┘
	├─ Това означава, че само класовете от същото асембли ще могат да създават обекти от тип този клас и да имат достъп до методите и полетата (с подходящо ниво на достъп) на класа.





╟─ Ако във Visual Studio имаме два проекта в общ solution и искаме от единия проект да използваме клас, дефиниран в другия проект, то реферираният клас трябва задължително да е public.









































12|            |
08|        |
04|    |
02|  |

─ │ ═ ║

┌ ┐ └ ┘ ┬ ┴ ├ ┤ ┼

╔ ╗ ╚ ╝ ╦ ╩ ╠ ╣ ╬

╒ ╕ ╘ ╛ ╤ ╧ ╞ ╡ ╪

╓ ╖ ╙ ╜ ╥ ╨ ╟ ╢ ╫

▀ ▄ █ ▌ ▐ ░ ▒ ▓ ■ □ ▪ ▫ ▬ ▲ ► ▼ ◄ ◊ ○ ☺ ☻
██

╔═══════════════════════════════════════════════════════════════════════╗
║
╠═══════════════════════════════════════════════════════════════════════╝
╟─
╟─┐
╟─┬─────────────────────────────────────────────────────────────────────┐
╟─┬─────────────────────────────────────────────────────────────────────┐
	│
	├─────────────────────────────────────────────────────────────────────┘
	├─
	├─┐
	├─┬───────────────────────────────────────────────────────────────────┐
	├─┬───────────────────────────────────────────────────────────────────┐
		│
		├───────────────────────────────────────────────────────────────────┘
		├─┬─────────────────────────────────────────────────────────────────┐
			├─┬───────────────────────────────────────────────────────────────┐
				│
				├───────────────────────────────────────────────────────────────┘
				├─┬─────────────────────────────────────────────────────────────┐