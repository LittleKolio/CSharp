
╔═══════════════════════════════════════════════════════════════════════╗
║ Object
╠═══════════════════════════════════════════════════════════════════════╝

╟─ Софтуерните обекти моделират обекти от реалния свят или абстрактни концепции (които също разглеждаме като обекти).

╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Характеристики на обектите
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ Състояния (states)
		├─┬─────────────────────────────────────────────────────────────────┘
			├─ Член -данни/-променливи (data members) описват състоянията на обектите. Те представляват променливи, вградени в обектите.
			
╟─├─┬───────────────────────────────────────────────────────────────────┐
		├─ Поведения (behaviors)
		├─┬─────────────────────────────────────────────────────────────────┘
			├─ Методи (methods) изграждат поведението на обектите.
			

╔═══════════════════════════════════════════════════════════════════════╗
║ Classes
╠═══════════════════════════════════════════════════════════════════════╝

╟─ Класът дефинира характеристики на даден обект (които ще наричаме атрибути) и неговото поведение (действията, които обектът може да извършва). Той е шаблон, чрез който се описва природата на някакъв обект. Атрибутите на класа се дефинират като собствени променливи в тялото му (наречени член-променливи). Поведението на обектите се моделира чрез дефиниция на методи в класовете. Всеки обект е представител на точно един клас.


╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Елементи на класа
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ Полета (fields)
		├─┬─────────────────────────────────────────────────────────────────┘
			├─ Член -данни/-променливи

╟─├─┬───────────────────────────────────────────────────────────────────┐
		├─ Свойства (properties)
		├─┬─────────────────────────────────────────────────────────────────┘
			├─ разширяват функционалността на полетата като дават възможност за допълнителна обработка на данните при извличането и записването им в полетата от класа.

╟─├─┬───────────────────────────────────────────────────────────────────┐
		├─ Методи
		├─┬─────────────────────────────────────────────────────────────────┘
			├─ Реализират манипулацията на данните.

╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Създаване и освобождаване на обекти
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ Създаването на обекти от предварително дефинирани класове по време на изпълнението на програмата става чрез оператора new.
		
╟─├─┬───────────────────────────────────────────────────────────────────┐
		├─ На променливата someCat от тип Cat присвояваме новосъздадена инстанция на класа Cat. Променливата someCat стои в стека, а нейната стойност (инстанцията на класа Cat) стои в динамичната памет (managed heap)
		├─┬─────────────────────────────────────────────────────────────────┐
			Cat someCat = new Cat();

╟─├─┬───────────────────────────────────────────────────────────────────┐
		│ Garbage Collector (.NET CLR)
		├─┬─────────────────────────────────────────────────────────────────┘
			├─ Това е система за почистване на паметта. Обектите, към които в даден момент вече няма референция в програмата, автоматично се унищожават и паметта, която заемат, се освобождава.

╟─├─┬───────────────────────────────────────────────────────────────────┐
		├─ Ако искаме ръчно да освободим даден обект, трябва да унищожим референцията към него
		├─┬─────────────────────────────────────────────────────────────────┘
			someCat = null;
			
		├─ Това не унищожава обекта веднага, но го оставя в състояние, в което той е недостъпен от програмата и при следващото включване на системата за почистване на паметта (garbage collector), той ще бъде освободен

╟─├─┬───────────────────────────────────────────────────────────────────┐
		│ Конструктори
		├─┬─────────────────────────────────────────────────────────────────┘
			├─ Конструкторът е специален метод на класа, който се извиква автоматично при създаването на обект от този клас и извършва инициализация на данните му (това е неговото основно предназначение).
			
			
			
╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Достъп до полета на обекта
	├─┬───────────────────────────────────────────────────────────────────┘
		Достъпът до полетата и свойствата (properties) на даден обект става чрез оператора . (точка).

╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Достъп до метод на обект
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ Извикването на методите на даден обект става чрез оператора . (точка).


















12|            |
08|        |
04|    |
02|  |

─ │ ═ ║

┌ ┐ └ ┘ ┬ ┴ ├ ┤ ┼

╔ ╗ ╚ ╝ ╦ ╩ ╠ ╣ ╬

╒ ╕ ╘ ╛ ╤ ╧ ╞ ╡ ╪

╓ ╖ ╙ ╜ ╥ ╨ ╟ ╢ ╫

▀ ▄ █ ▌ ▐ ░ ▒ ▓ ■ □ ▪ ▫ ▬ ▲ ► ▼ ◄ ◊ ○ ☺ ☻
██

╔═══════════════════════════════════════════════════════════════════════╗
║
╠═══════════════════════════════════════════════════════════════════════╝
╟─
╟─┐
╟─┬─────────────────────────────────────────────────────────────────────┐
╟─┬─────────────────────────────────────────────────────────────────────┐
	│
	├─────────────────────────────────────────────────────────────────────┘
	├─
	├─┐
	├─┬───────────────────────────────────────────────────────────────────┐
	├─┬───────────────────────────────────────────────────────────────────┐
		│
		├───────────────────────────────────────────────────────────────────┘
		├─┬─────────────────────────────────────────────────────────────────┐
			├─┬───────────────────────────────────────────────────────────────┐
				│
				├───────────────────────────────────────────────────────────────┘
				├─┬─────────────────────────────────────────────────────────────┐