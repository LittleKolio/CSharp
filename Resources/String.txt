╔═══════════════════════════════════════════════════════════════════════╗
║ String
╠═══════════════════════════════════════════════════════════════════════╝


╟─┬─────────────────────────────────────────────────────────────────────┐
  │ Format
  ├─┬───────────────────────────────────────────────────────────────────┘
    │ Hexadecimal string
    ├─┬─────────────────────────────────────────────────────────────────┘
      object.toString("X")
			
    ├─┬─────────────────────────────────────────────────────────────────┐
      char c = Console.ReadKey().KeyChar;		
      Console.WriteLine("{0:X4}", (uint)c); // uppercase
      Console.WriteLine("{0:x4}", (uint)c)); // lowercase

╟─├─┬───────────────────────────────────────────────────────────────────┐
    │ string.Format()
    ├─┬─────────────────────────────────────────────────────────────────┘
      string value = string.Format("{0:F3}", number);
		

╟─├─┬───────────────────────────────────────────────────────────────────┐
    │ Custom Numeric Formats
    ├─┬─────────────────────────────────────────────────────────────────┤
      ├ "{0:0.00}", 1
      ├─ Output: 1,00
      ├─────────────────────────────────────────────────────────────────┤
      ├ "{0:#####.###}", 0.23488
      ├─ Output: ,235
      ├─────────────────────────────────────────────────────────────────┤
      ├ "{0:#####}", 12345.67
      ├─ Output: 12346
      ├─────────────────────────────────────────────────────────────────┤
      ├ "{0:(0#) ### ## ##}", 29342525
      ├─ Output: (02) 934 25 25
      ├─────────────────────────────────────────────────────────────────┤
      ├ "{0:%##}", 0.234
      ├─ Output: %23
      ├─────────────────────────────────────────────────────────────────┤
      ├ "{0:000.0%}", 0.23488
      ├─ Output: 023.5%
      ├─────────────────────────────────────────────────────────────────┤
      ├ "{0:.00%}", 10.023488
      ├─ Output: 1002.35%
      ├─────────────────────────────────────────────────────────────────┤

╟─├─┬───────────────────────────────────────────────────────────────────┐
    │ Standard Numeric Formats
    ├─┬─────────────────────────────────────────────────────────────────┤
      ├ "{0:C2}", 123.456
      ├─ Output: 123,46 лв.
      ├─────────────────────────────────────────────────────────────────┤
      ├ "{0:D6}", -1234
      ├─ Output: -001234
      ├─────────────────────────────────────────────────────────────────┤
      ├ "{0:E2}", 123
      ├─ Output: 1,23Е+002
      ├─────────────────────────────────────────────────────────────────┤
      ├ "{0:F2}", -123.456
      ├─ Output: -123,46
      ├─────────────────────────────────────────────────────────────────┤
      ├ "{0:N2}", 1234567.8
      ├─ Output: 1 234 567,80
      ├─────────────────────────────────────────────────────────────────┤
      ├ "{0:P}", 0.456
      ├─ Output: 45,60 %
      ├─────────────────────────────────────────────────────────────────┤
      ├ "{0:X}", 254
      ├─ Output: FE
      ├─────────────────────────────────────────────────────────────────┤
		
╟─┬─────────────────────────────────────────────────────────────────────┐
	├─ Null / Empty / White-space
	├─┬───────────────────────────────────────────────────────────────────┘
		String.IsNullOrWhiteSpace(str)
		String.IsNullOrEmpty(str)

		
╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Element of a string / sequence
	├─┬───────────────────────────────────────────────────────────────────┘
	  │ Get the last n characters from a string
	  ├─┬─────────────────────────────────────────────────────────────────┘
		  string str = "something";
		  str = str.Substring(str.Length - n)

╟─├─┬───────────────────────────────────────────────────────────────────┐
	  │ Last
	  ├─┬─────────────────────────────────────────────────────────────────┘
		  string.Last();
			
		
╟─├─┬───────────────────────────────────────────────────────────────────┐
	  │ StartsWith / EndsWith
	  ├─┬─────────────────────────────────────────────────────────────────┘
		  string.StartsWith("str");
		  string.EndsWith("str");
			
╟─├─┬──────────────────────────────────────────────────────────IndexOf──┐
	  │ IndexOf
	  ├─┬─────────────────────────────────────────────────────────────────┘
      ├─ We use IndexOf to see if a string contains a word. It returns an index when the substring is found, but -1 if not.
		
	  ├─┬────────────────────────────────────────────────────────IndexOf──┐
			│ Loop through all instances of the letter 'a'.
			├─┬───────────────────────────────────────────────────────────────┘
				string s = "I have a cat";

				int i = 0;
				while ((i = s.IndexOf('a', i)) != -1)
				{
					Console.WriteLine(s.Substring(i));
					i++;
				}
			
╟─├─├─┬────────────────────────────────────────────────────────IndexOf──┐
			│ LastIndexOf
			├─┬───────────────────────────────────────────────────────────────┘
				├─ This works like IndexOf, but searches in reverse, from the right to the left part of the string. It starts with the last char.
			
╟─├─├─┬────────────────────────────────────────────────────────IndexOf──┐
			│ IndexOfAny
			├─┬───────────────────────────────────────────────────────────────┘
				├─ This method receives a char array argument. It searches for the first index of any of the characters provided in that array.
			
╟─├─├─┬────────────────────────────────────────────────────────IndexOf──┐
			│ LastIndexOfAny
			├─┬───────────────────────────────────────────────────────────────┘
			
╟─├─├─┬────────────────────────────────────────────────────██──IndexOf──┐
			│ IndexOf vs for-loop
			├─┬───────────────────────────────────────────────────────────────┘
				Should we prefer IndexOf over for-loops when-possible? Test IndexOf against a single-character iteration for-loop and it is more efficient to scan each character individually than to use IndexOf.
			
			├─┬──────────────────────────────────────────────────────IndexOf──┐
				using System;
				using System.Diagnostics;

				class Program
				{
					const int _max = 1000000;
					static void Main()
					{
						string s = "abc.123.456.xyz";

						// Version 1: use for-loop to count chars.
						var s1 = Stopwatch.StartNew();
						for (int i = 0; i < _max; i++)
						{
							int c = 0;
							for (int e = 0; e < s.Length; e++)
							{
								if (s[e] == '.') { c++; }
							}
						}
						s1.Stop();

						// Version 2: use IndexOf to count chars.
						var s2 = Stopwatch.StartNew();
						for (int i = 0; i < _max; i++)
						{
							int c = 0, e = 0;
							while ((e = s.IndexOf('.', e)) != -1)
							{ e++; c++; }
						}
						s2.Stop();

						// Result times.
						Console.WriteLine(
							((double)
							(s1.Elapsed.TotalMilliseconds * 1000000) / _max)
							.ToString("0.00 ns"));
						Console.WriteLine(
							((double)
							(s2.Elapsed.TotalMilliseconds * 1000000) / _max)
							.ToString("0.00 ns"));
							
						Console.Read();
					}
				}
			
╟─├─┬───────────────────────────────────────────────────────────────────┐
	  │ Contains
	  ├─┬─────────────────────────────────────────────────────────────────┘		
			├─██ This is a wrapper method. It calls IndexOf with StringComparison.Ordinal. It returns true or false, not an integer. So it is a bit simpler to use.

╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Repeat a character
	├─┬───────────────────────────────────────────────────────────────────┘
		string tabs = new String('\t', n);

╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Replacing a char at a given index
	├─┬───────────────────────────────────────────────────────────────────┘
		str = str.Remove(3, 2).Insert(3, "ZX");


╟─┬─────────────────────────────────────────────────────────────────────┐
	│ ReferenceEquals()
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ The object.ReferenceEquals method gives you the ability to determine if two objects are in the same memory location.
		├─ In the compilation step of the C# language, string literals are pooled and all references to a specific value will be equal. 



╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Equals() / ==
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ Compares strings. It is not the same as the Compare and CompareTo methods. Equals tests strings for equality. It is invoked with the method name Equals or with the equality operator.

╟─┬─────────────────────────────────────────────────────────────────────┐
	│ string.Compare()
	├─┬───────────────────────────────────────────────────────────────────┘
		├─ bool 

╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Trim() / TrimStart() / TrimEnd()
	├─┬───────────────────────────────────────────────────────────────────┘
		string text = "  {{ Text }} ";
		
		text = text.Trim(new[] { '{', '}' })
		Console.WriteLine(text);
		// "  {{ Text }} "
		
		text = text.Trim(new[] { '{', '}', ' ' })
		Console.WriteLine(text);
		// "Text"

╟─┬─────────────────────────────────────────────────────────────────────┐
	│ Padding
	├─┬───────────────────────────────────────────────────────────────────┘
		str.PadLeft(int length, char symbol)
		str.PadRight(int totalWidth, char symbol)





╟─┬─────────────────────────────────────────────────────────────────────┐
  │ StringBuilder
  ├─┬───────────────────────────────────────────────────────────────────┘



╟─├─┬───────────────────────────────────────────────────────────────────┐
	  │ AppendFormat
	  ├─┬─────────────────────────────────────────────────────────────────┘
			├─ The core reason to use AppendFormat is for clarity of the resulting code. It is clear to see what string data will be generated. You can put parenthesis around values, which would be more confusing syntactically if you were to use string concatenation.

	  ├─┬─────────────────────────────────────────────────────────────────┐
			StringBuilder sb = new StringBuilder();
			
			string[] data = { "Dot", "Net", "Perls" };
			int counter = 0;
			
			foreach (string value in data)
			{
				sb.AppendFormat(
					"You have visited {0} ({1}).\n",
					value,
					++counter);
			}
			Console.WriteLine(sb);

╟─├─├─┬─────────────────────────────────────────────────────────────────┐
			├─ The StringBuilder AppendFormat method is useful for generating text based on a pattern.








12|            |
08|        |
04|    |
02|  |

─ │ ═ ║

┌ ┐ └ ┘ ┬ ┴ ├ ┤ ┼

╔ ╗ ╚ ╝ ╦ ╩ ╠ ╣ ╬

╒ ╕ ╘ ╛ ╤ ╧ ╞ ╡ ╪

╓ ╖ ╙ ╜ ╥ ╨ ╟ ╢ ╫

▀ ▄ █ ▌ ▐ ░ ▒ ▓ ■ □ ▪ ▫ ▬ ▲ ► ▼ ◄ ◊ ○ ☺ ☻
██

╔═══════════════════════════════════════════════════════════════════════╗
║
╠═══════════════════════════════════════════════════════════════════════╝
╟─
╟─┐
╟─┬─────────────────────────────────────────────────────────────────────┐
╟─┬─────────────────────────────────────────────────────────────────────┐
	│
	├─────────────────────────────────────────────────────────────────────┘
	├─
	├─┐
	├─┬───────────────────────────────────────────────────────────────────┐
	├─┬───────────────────────────────────────────────────────────────────┐
		│
		├───────────────────────────────────────────────────────────────────┘
		├─┬─────────────────────────────────────────────────────────────────┐
			├─┬───────────────────────────────────────────────────────────────┐
				│
				├───────────────────────────────────────────────────────────────┘
				├─┬─────────────────────────────────────────────────────────────┐